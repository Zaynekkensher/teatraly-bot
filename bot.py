import json
import logging
import os
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, WebAppInfo, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from flask import Flask, request

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TOKEN')  # —Ç–µ–ø–µ—Ä—å –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
EVENTS_FILE = 'events.json'

app = Flask(__name__)

# –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
def load_events():
    try:
        with open(EVENTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
def save_events(events):
    with open(EVENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(events, f, indent=2, ensure_ascii=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", web_app=WebAppInfo(url="https://zaynekkensher.github.io/-teatraly-webapp/"))],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–¢–µ–∞—Ç—Ä–∞–ª—ã' üé≠!", reply_markup=reply_markup)

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    data = json.loads(update.message.web_app_data.data)

    try:
        datetime.strptime(data["date"], "%d.%m.%Y")
        datetime.strptime(data["time"], "%H:%M")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ —á–∞—Å—ã.")
        return

    events = load_events()
    if chat_id not in events:
        events[chat_id] = []
    events[chat_id].append(data)
    save_events(events)

    await update.message.reply_text("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

async def list_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    events = load_events().get(chat_id, [])
    if not events:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—É—Å—Ç üóìÔ∏è")
        return
    events.sort(key=lambda e: datetime.strptime(e['date'] + ' ' + e['time'], '%d.%m.%Y %H:%M'))
    msg = "üìÖ –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
    for e in events:
        event_date = datetime.strptime(e['date'] + ' ' + e['time'], '%d.%m.%Y %H:%M')
        now = datetime.now()
        if event_date < now:
            msg += f"üîò {e['date']} {e['time']} (–ø—Ä–æ—à–ª–æ)\n"
        else:
            msg += f"üü¢ {e['date']} {e['time']}\n"
        msg += f"üè∑ {e['title']} | {e['place']}\nüìç {e['city']}\nüìù {e['comment']}\n\n"
    await update.message.reply_text(msg)

# –≤–µ–±-—Ö—É–∫ –¥–ª—è Telegram
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook_handler():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok", 200

if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", list_events))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìã –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π$"), list_events))

    # webhook-—Ä–µ–∂–∏–º, –ø–æ—Ä—Ç –¥–ª—è Render
    port = int(os.environ.get("PORT", 5000))
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )